{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onUserSelect","selectedUserId","useState","query","setQuery","selectValue","setSelectValue","visibleTodos","setVisibleTodos","useEffect","filter","todo","title","includes","toLowerCase","completed","className","type","value","placeholder","onChange","event","target","onClick","sort","Math","random","length","map","classNames","htmlFor","id","checked","userId","request","url","a","fetch","responce","json","getAllTodos","getUserById","CurrentUser","user","setUser","userFromServer","getUser","name","phone","email","website","App","setSelectedUserId","setTodos","todosFromAPI","fatchingTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ee0cab9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onUserSelect: (id: number) => void,\n  selectedUserId: number\n};\n\nconst randomizedTodos = (arr: Todo[]) => {\n  return arr.sort(() => Math.random() - 0.5);\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onUserSelect, selectedUserId }) => {\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      if (!todo.title.includes(query.toLowerCase())) {\n        return false;\n      }\n\n      switch (selectValue) {\n        case 'all':\n          return true;\n\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    }));\n  }, [todos, query, selectValue]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        placeholder=\"Search by title\"\n        onChange={event => setQuery(event.target.value)}\n      />\n\n      <select\n        value={selectValue}\n        onChange={(event) => setSelectValue(event.target.value)}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <button\n        type=\"button\"\n        onClick={() => setVisibleTodos(randomizedTodos([...visibleTodos]))}\n      >\n        Randomize\n      </button>\n      {todos.length ? (\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    className=\"checkbox\"\n                    type=\"checkbox\"\n                    id={`${todo.id}`}\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => onUserSelect(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : <p>Loading...</p> }\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (url: string) => {\n  const responce = await fetch(`${BASE_URL}${url}`);\n\n  return responce.json();\n};\n\nexport const getAllTodos = (): Promise<Todo[]> => request('/todos');\n\nexport const getUserById = (userId: number): Promise<User> => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api/api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId }) => {\n  const [user, setUser] = useState<User | null>();\n\n  useEffect(() => {\n    async function getUser() {\n      const userFromServer = await getUserById(userId);\n\n      setUser(userFromServer);\n    }\n\n    getUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        {`Selected user: ${user?.id}`}\n      </h2>\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__website\">{user?.website}</p>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types/Todo';\nimport { getAllTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    async function fatchingTodos() {\n      const todosFromAPI = await getAllTodos();\n\n      setTodos(todosFromAPI);\n    }\n\n    fatchingTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onUserSelect={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <>\n              <button\n                type=\"button\"\n                className=\"button__clear\"\n                onClick={() => {\n                  setSelectedUserId(0);\n                }}\n              >\n                Clear\n              </button>\n              <CurrentUser userId={selectedUserId} />\n            </>\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}